package ru.tech.smarttest.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.tech.smarttest.models.PlayerJoinStatus;
import ru.tech.smarttest.service.GameService;
import ru.tech.smarttest.service.RoundService;

import java.util.List;


@RestController
@RequestMapping("/players")
public class PlayerController {


    @Autowired
    private RoundService roundService;

    private final GameService gameService;

    @Autowired
    public PlayerController(GameService gameService) {
        this.gameService = gameService;
    }


    // –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
    @GetMapping("/available")
    public ResponseEntity<List<String>> getAvailablePlayers() {
        return ResponseEntity.ok(gameService.getAvailablePlayers());
    }

    @GetMapping("/round2theme")
    public ResponseEntity<List<String>> getTheme2Round(){
        return ResponseEntity.ok(gameService.getTheme2Round());
    }



    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏
    @PostMapping("/join")
    public ResponseEntity<String> joinPlayer(@RequestParam String playerName) {
        PlayerJoinStatus status = gameService.joinPlayer(playerName);
        switch (status) {
            case SUCCESS:
                return ResponseEntity.ok("‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω.");
            case ALREADY_JOINED:
                return ResponseEntity.status(HttpStatus.CONFLICT).body("‚ö†Ô∏è –ò–≥—Ä–æ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.");
            case NOT_FOUND:
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            case LIMIT_REACHED:
                return ResponseEntity.status(HttpStatus.FORBIDDEN).body("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤.");
            default:
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
        }
    }

    @PostMapping("/leave")
    public ResponseEntity<String> leavePlayer(@RequestParam String playerName){
        boolean left = gameService.leavePlayer(playerName);
        if (left) {
            return ResponseEntity.ok("üëã –ò–≥—Ä–æ–∫ "+playerName+" —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω.");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("‚ö†Ô∏è –ò–≥—Ä–æ–∫ "+playerName+" –Ω–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á—ë–Ω.");
        }
    }

    @PostMapping("/eliminate")
    public ResponseEntity<String> eliminatePlayer(@RequestParam String playerName) {
        roundService.eliminatePlayer(playerName);
        return ResponseEntity.ok("–ò–≥—Ä–æ–∫ " + playerName + " –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∏–≥—Ä—ã.");
    }


}
